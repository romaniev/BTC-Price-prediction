# -*- coding: utf-8 -*-
"""BTC-Price prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S5taP0Our61DvB_1octhqrOvfDYo_44h
"""

#Description: Prediction of the past 60 days about stock price

import math
import numpy as np
import pandas as pd
import pandas_datareader as web
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')


#get quote from stocks
df= web.DataReader('BTC-USD', data_source='yahoo', start='2012-01-01', end='2021-05-13')

#show dataframe
print(df)
#Get number of rows of dataset
df.shape

#visualize code
plt.figure(figsize=(16,8))
plt.title('Close Price History')
plt.plot(df['Close'])
plt.xlabel('Date', fontsize=18)
plt.ylabel('Close Price USD ($)', fontsize=18)
plt.show()

#Create a new dataframe with only the 'Close column'
data=df.filter(['Close']) 
#convert the dataframe to a numpy array
dataset=data.values
#Get the number of rows to train the model on
training_data_len = math.ceil(len(dataset)*.8)
training_data_len

#Scale the data
scaler= MinMaxScaler(feature_range=(0,1))
scaled_data = scaler.fit_transform(dataset)
scaled_data

#Create a training dataset
#Create a training dataset
train_data = scaled_data[0:training_data_len , :]
#split data in x_train y_train
x_train=[]
y_train=[]

for i in range (60, len(train_data)):
  x_train.append(train_data[i-60:i,0])
  y_train.append(train_data[i,0])
  if i <= 60:
    print(x_train)
    print(y_train)
    print()

#Convert x_train and y_train to numpy arrays
x_train, y_train = np.array(x_train), np.array(y_train)

#Reshape the data
x_train=np.reshape(x_train,(x_train.shape[0],x_train.shape[1],1))
x_train.shape

#Build the LSTM model
model=Sequential()
model.add(LSTM(50,return_sequences=True, input_shape=(x_train.shape[1],1)))
model.add(LSTM(50, return_sequences=False))
model.add(Dense(25))
model.add(Dense(1))

#Compiile the module
model.compile(optimizer='adam', loss='mean_squared_error')

#Train model
model.fit(x_train, y_train,batch_size=1, epochs=1)

#Create the testing data set
#Create a new array containing scaled values 
test_data = scaled_data[training_data_len - 60: , :]
#Create the data sets x_test and y_test
x_test=[]
y_test=dataset[training_data_len:,:]
for i in range(60, len(test_data)):
    x_test.append(test_data[i-60:i,0])

#Convert the data to a numpy array
x_test=np.array(x_test)

#Reshape the data
x_test=np.reshape(x_test, (x_test.shape[0],x_test.shape[1],1))

#Get the models predicted price values
predictions=model.predict(x_test)
predictions=scaler.inverse_transform(predictions)

#Get the root mean squared error RMSE
rmse=np.sqrt(np.mean(predictions-y_test)**2)
rmse

#Plot the data
train = data[:training_data_len]
valid = data[training_data_len:]
valid['Predictions'] = predictions
#Visualize the data
plt.figure(figsize=(16,8))
plt.title('Model')
plt.xlabel('Date',fontsize=18)
plt.ylabel('Close price in USD $', fontsize=18)
plt.plot(train['Close'])
plt.plot(valid[['Close','Predictions']])
plt.legend(['Train','Val','Predictions'], loc='lower right')
plt.show()

#Show the valid and predicted prices
valid

#Get the quote 
btc_quote=df= web.DataReader('BTC-USD', data_source='yahoo', start='2012-01-01', end='2021-05-14')
#New df
new_df=btc_quote.filter(['Close'])
#Get the last 60 day closing price values and convert to array
last_60_days=new_df[-60:].values
#Scale the data to be values btw 0 and 1
last_60_days_scaled=scaler.transform(last_60_days)
#Create empty list
X_test=[]
#Append to the list
X_test.append(last_60_days_scaled)
X_test=np.array(X_test)
X_test=np.reshape(X_test,(X_test.shape[0],X_test.shape[1],1))
#Get predicted scaled price
pred_price=model.predict(X_test)
#Undo scaling
pred_price=scaler.inverse_transform(pred_price)
print(pred_price)

#Get the quote 
btc_quote2=df= web.DataReader('BTC-USD', data_source='yahoo', start='2021-01-01', end='2021-05-13')
btc_quote2
